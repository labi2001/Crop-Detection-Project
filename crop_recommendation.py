{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "ad2e2999-b6c3-4718-9a8b-1833a3e56826",
   "metadata": {},
   "outputs": [],
   "source": [
    "import os\n",
    "import json\n",
    "import pandas as pd\n",
    "from ctgan import CTGAN\n",
    "from sdv.metadata import Metadata\n",
    "from sdv.evaluation.single_table import evaluate_quality\n",
    "import warnings\n",
    "warnings.filterwarnings(\"ignore\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "75891438-a813-4b75-a554-dc1eddc3bc1f",
   "metadata": {},
   "outputs": [],
   "source": [
    "# -----------------------\n",
    "# Helper Functions \n",
    "# -----------------------\n",
    "def load_crop_data(file_path):\n",
    "    if not os.path.exists(file_path):\n",
    "        raise FileNotFoundError(f\"File {file_path} not found.\")\n",
    "        \n",
    "    df = pd.read_csv(file_path)\n",
    "    print(\"Data loaded successfully.\")\n",
    "    return df\n",
    "\n",
    "def detect_metadata(df):\n",
    "    metadata = Metadata.detect_from_dataframe(df)\n",
    "    print(\"Metadata detected.\")\n",
    "    return metadata\n",
    "\n",
    "def train_ctgan(df, epochs, discrete_columns):\n",
    "    model = CTGAN(verbose=True, epochs=epochs)\n",
    "    model.fit(df, discrete_columns=discrete_columns)\n",
    "    print(\"CTGAN training complete.\")\n",
    "    return model\n",
    "\n",
    "def generate_ctgan_samples(model, num_samples):\n",
    "    samples = model.sample(num_samples)\n",
    "    print(\"Synthetic samples generated.\")\n",
    "    print(f\"Generated data shape: {samples.shape}\")\n",
    "    return samples\n",
    "\n",
    "def predict_crop(row, conditions):\n",
    "    for crop, ranges in conditions.items():\n",
    "        if (ranges[\"nitrogen\"][0] <= row[\"nitrogen\"] <= ranges[\"nitrogen\"][1] and\n",
    "            ranges[\"phosphorus\"][0] <= row[\"phosphorus\"] <= ranges[\"phosphorus\"][1] and\n",
    "            ranges[\"potassium\"][0] <= row[\"potassium\"] <= ranges[\"potassium\"][1] and\n",
    "            ranges[\"temperature\"][0] <= row[\"temperature\"] <= ranges[\"temperature\"][1] and\n",
    "            ranges[\"humidity\"][0] <= row[\"humidity\"] <= ranges[\"humidity\"][1] and\n",
    "            ranges[\"ph\"][0] <= row[\"ph\"] <= ranges[\"ph\"][1] and\n",
    "            ranges[\"rainfall\"][0] <= row[\"rainfall\"] <= ranges[\"rainfall\"][1]):\n",
    "            return crop\n",
    "    return \"Unknown\"\n",
    "    \n",
    "def apply_rule_filter(synthetic_df, conditions):\n",
    "    synthetic_df[\"predicted_crop\"] = synthetic_df.apply(\n",
    "        lambda row: predict_crop(row, conditions), axis=1)\n",
    "\n",
    "    filtered_df = synthetic_df[synthetic_df[\"predicted_crop\"] != \"Unknown\"].copy()\n",
    "    filtered_df = filtered_df.drop(columns=[\"predicted_crop\"])\n",
    "\n",
    "    print(f\"Original synthetic samples: {synthetic_df.shape[0]}\")\n",
    "    print(f\"Filtered synthetic samples: {filtered_df.shape[0]}\")\n",
    "    return filtered_df\n",
    "\n",
    "def save_data(df, file_path):\n",
    "    print(f\"\\nSaving data to {file_path}...\")\n",
    "    df.to_csv(file_path, index=False)\n",
    "    print(\"Data saved successfully.\")\n",
    "\n",
    "def evaluate_synthetic_data_quality(real_data, synthetic_data, metadata):\n",
    "    quality_report = evaluate_quality(real_data=real_data, synthetic_data=synthetic_data, metadata=metadata)\n",
    "    print(f\"\\nQuality Score: {quality_report.get_score()}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "284d6ce4-842d-43b6-8a1c-1ec194c7d489",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Loading crop conditions from crop_conditions.json...\n",
      "Crop conditions loaded successfully.\n",
      "Data loaded successfully.\n",
      "Metadata detected.\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Python(13957) MallocStackLogging: can't turn off malloc stack logging because it was not enabled.\n",
      "Python(13965) MallocStackLogging: can't turn off malloc stack logging because it was not enabled.\n",
      "Python(13966) MallocStackLogging: can't turn off malloc stack logging because it was not enabled.\n",
      "Python(13967) MallocStackLogging: can't turn off malloc stack logging because it was not enabled.\n",
      "Python(13968) MallocStackLogging: can't turn off malloc stack logging because it was not enabled.\n",
      "Python(13969) MallocStackLogging: can't turn off malloc stack logging because it was not enabled.\n",
      "Python(13970) MallocStackLogging: can't turn off malloc stack logging because it was not enabled.\n",
      "Python(13971) MallocStackLogging: can't turn off malloc stack logging because it was not enabled.\n",
      "Python(13972) MallocStackLogging: can't turn off malloc stack logging because it was not enabled.\n",
      "Python(13973) MallocStackLogging: can't turn off malloc stack logging because it was not enabled.\n",
      "Python(13974) MallocStackLogging: can't turn off malloc stack logging because it was not enabled.\n",
      "Gen. (-0.19) | Discrim. (-0.26): 100%|████████| 300/300 [00:31<00:00,  9.63it/s]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "CTGAN training complete.\n",
      "Synthetic samples generated.\n",
      "Generated data shape: (1000000, 8)\n",
      "Original synthetic samples: 1000000\n",
      "Filtered synthetic samples: 5802\n",
      "\n",
      "Saving data to synthetic_crop_recommendation.csv...\n",
      "Data saved successfully.\n",
      "Generating report ...\n",
      "\n",
      "(1/2) Evaluating Column Shapes: |████████████████| 8/8 [00:00<00:00, 33.33it/s]|\n",
      "Column Shapes Score: 80.06%\n",
      "\n",
      "(2/2) Evaluating Column Pair Trends: |█████████| 28/28 [00:00<00:00, 87.60it/s]|\n",
      "Column Pair Trends Score: 80.17%\n",
      "\n",
      "Overall Score (Average): 80.12%\n",
      "\n",
      "\n",
      "Quality Score: 0.8011575740040324\n"
     ]
    }
   ],
   "source": [
    "def main():\n",
    "    REAL_DATA_FILE = \"crop_recommendation.csv\"\n",
    "    FILTERED_SYNTHETIC_DATA_FILE = \"synthetic_crop_recommendation.csv\"\n",
    "    JSON_CONDITIONS_FILE = \"crop_conditions.json\" \n",
    "    NUM_SYNTHETIC_SAMPLES_TO_GENERATE = 1000000\n",
    "    CTGAN_EPOCHS = 300\n",
    "    CAT_FEATURES = [\"label\"] \n",
    "    \n",
    "    # --- Load Crop Conditions from JSON --- # <--- New Section\n",
    "    loaded_crop_conditions = None # Initialize variable to hold the dictionary\n",
    "    \n",
    "    \n",
    "    print(f\"Loading crop conditions from {JSON_CONDITIONS_FILE}...\")\n",
    "    try:\n",
    "        # Ensure the JSON file is in the same directory as your notebook,\n",
    "        # or provide the full path here.\n",
    "        with open(JSON_CONDITIONS_FILE, 'r') as f:\n",
    "            loaded_crop_conditions = json.load(f)\n",
    "\n",
    "        print(\"Crop conditions loaded successfully.\")\n",
    "    except FileNotFoundError:\n",
    "        print(f\"Error: The crop conditions file '{JSON_CONDITIONS_FILE}' was not found.\")\n",
    "        print(\"Please make sure you ran the JSON saving step first and the file is in the correct location.\")\n",
    "        return # Exit the program if conditions can't be loaded\n",
    "    except json.JSONDecodeError:\n",
    "        print(f\"Error: Could not decode JSON from '{JSON_CONDITIONS_FILE}'. The file might be corrupted.\")\n",
    "        return # Exit if JSON is invalid\n",
    "    except Exception as e:\n",
    "        print(f\"An unexpected error occurred during conditions loading: {e}\")\n",
    "        return # Exit on other errors\n",
    "    # --- End JSON Loading ---\n",
    "\n",
    "    \n",
    "    # Load data\n",
    "    try:\n",
    "        real_df = load_crop_data(REAL_DATA_FILE)\n",
    "    except FileNotFoundError as e:\n",
    "        print(e)\n",
    "        return\n",
    "\n",
    "    # Detect metadata\n",
    "    metadata = detect_metadata(real_df)\n",
    "    \n",
    "    # Train CTGAN\n",
    "    try:\n",
    "        ctgan = train_ctgan(real_df, epochs=CTGAN_EPOCHS, discrete_columns=CAT_FEATURES)\n",
    "    except Exception as e:\n",
    "        print(f\"Error training CTGAN: {e}\")\n",
    "        return\n",
    "    \n",
    "    # Generate synthetic data\n",
    "    synthetic_df = generate_ctgan_samples(ctgan, num_samples=NUM_SYNTHETIC_SAMPLES_TO_GENERATE)\n",
    "    \n",
    "    # Apply rule-based filter (assuming crop_conditions is defined)\n",
    "    filtered_df = apply_rule_filter(synthetic_df, crop_conditions)\n",
    "    \n",
    "    # Save synthetic data\n",
    "    save_data(filtered_df, FILTERED_SYNTHETIC_DATA_FILE)\n",
    "    \n",
    "    # Evaluate quality\n",
    "    try:\n",
    "        evaluate_synthetic_data_quality(real_df, filtered_df, metadata)\n",
    "    except Exception as e:\n",
    "        print(f\"Error evaluating quality: {e}\")\n",
    "\n",
    "if __name__ == \"__main__\":\n",
    "    main()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "17d9a4a4-b6a0-4c97-b267-e570b430b519",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "id": "4661786c-db17-4d0e-a6df-11f75e66dbb3",
   "metadata": {},
   "source": [
    "## Quality Report Summary\n",
    "\n",
    "- Column Shapes Score: 80.06%\n",
    "This measures how closely the synthetic data’s column-wise distributions match the original data.\n",
    "\n",
    "- Column Pair Trends Score: 80.17%\n",
    "This assesses whether relationships between pairs of features (e.g., nitrogen and phosphorus) are preserved.\n",
    "\n",
    "- Overall Quality Score: 80.11%\n",
    "A strong result — anything above 70% is usually considered decent in synthetic data tasks."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "138444e8-9db5-43dc-b2fa-4901697752ea",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "6db94f79-5fb4-4f15-9d66-2645b86b9661",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "a15a86fd-040a-4030-9dea-965c77ee00b3",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3.13.1",
   "language": "python",
   "name": "python3.13.1"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.13.1"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
